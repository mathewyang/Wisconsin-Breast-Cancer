library(pROC)
#Load data
wdbc = read.csv("wdbc.data", header= FALSE)
#only the means
wdbc.means = wdbc[2:12]
#Logistic regression on means.
#Train and test on same dataset.
cancer.fit = glm(V2~V3 + V4 + V5 + V6 + V7 + V8 + V9 + V10 + V11 + V12, data=wdbc.means, family= binomial)
summary(cancer.fit)
#Gives probabilities that the observation is a malignant tumor. Probability close to 1 is malignant, 0 is benign.
cancer.probs = predict(cancer.fit, type = "response")
#Create a vector of 569 Benign elements
cancer.pred=rep("B",569)
#Transform all the ones greate than 0.5 to Malignant.
cancer.pred[cancer.probs>0.5]="M"
table(cancer.pred, wdbc$V2)
#10-fold cross validation
ctrl <- trainControl(method = "repeatedcv", number = 10, savePredictions = TRUE)
mod_fit <- train(V2~V3 + V4 + V5 + V6 + V7 + V8 + V9 + V10 + V11 + V12,
data=wdbc.means, method="glm", family="binomial",
trControl = ctrl)
# Select a parameter setting
selectedIndices <- mod_fit$pred$mtry == 2
# Plot:
plot.roc(mod_fit$pred$obs[selectedIndices],
mod_fit$pred$M[selectedIndices])
pred = predict(mod_fit, newdata = wdbc.means)
confusionMatrix(data=pred, wdbc.means$V2)
mod_fit$pred
head(mod_fit$pred)
plot.roc(mod_fit$pred)
plot.roc(mod_fit$pred$pred,mod_fit$pred$obs)
source('~/.active-rstudio-document')
install.packages("sonar")
pca.model
library(caret)
library(pROC)
#Load data
wdbc = read.csv("data/wdbc.data", header= FALSE)
#only the means
wdbc.means = wdbc[2:12]
#Logistic regression on means.
#Train and test on same dataset.
cancer.fit = glm(V2~V3 + V4 + V5 + V6 + V7 + V8 + V9 + V10 + V11 + V12, data=wdbc.means, family= binomial)
summary(cancer.fit)
#Gives probabilities that the observation is a malignant tumor. Probability close to 1 is malignant, 0 is benign.
cancer.probs = predict(cancer.fit, type = "response")
#Create a vector of 569 Benign elements
cancer.pred=rep("B",569)
#Transform all the ones greate than 0.5 to Malignant.
cancer.pred[cancer.probs>0.5]="M"
table(cancer.pred, wdbc$V2)
#10-fold cross validation
ctrl <- trainControl(method = "repeatedcv", number = 10, savePredictions = TRUE)
mod_fit <- train(V2~V3+ V4 + V5 + V6 + V7 +V8 + V9 + V10 + V11 +V12,
data=wdbc.means, method="glm", family="binomial",
trControl = ctrl)
#PCA
pca.model = prcomp(wdbc.means[,2:11])
summary(pca.model)
biplot(pca.model, scale = 0)
pred = predict(mod_fit, type = "prob")
actual = as.numeric(wdbc.means$V2)-1
roc.log <- roc(actual, pred$B)
# Plot ROC
plot.roc(roc.log, xlab = "False Positive Rate", ylab="True Positive Rate", main="ROC Curve", print.auc=TRUE)
#Get AUC
auc(roc.log)
pca.model
class(pca.model)
pca.model$sdev
pca.model$rotation
pca.model$x
summary(pca.model$x)
pca.model$x[1]
pca.model$x[,1]
summary(pca.model$x[,1])
#Logistic regression on means.
#Train and test on same dataset.
cancer.fit = glm(V2 ~ pca.model$x[,1] + pca.model$x[,2] + pca.model$x[,3], data=wdbc.means, family= binomial)
summary(cancer.fit)
#Gives probabilities that the observation is a malignant tumor. Probability close to 1 is malignant, 0 is benign.
cancer.probs = predict(cancer.fit, type = "response")
#Create a vector of 569 Benign elements
cancer.pred=rep("B",569)
#Transform all the ones greate than 0.5 to Malignant.
cancer.pred[cancer.probs>0.5]="M"
table(cancer.pred, wdbc$V2)
#10-fold cross validation
ctrl <- trainControl(method = "repeatedcv", number = 10, savePredictions = TRUE)
mod_fit <- train(V2~ pca.model$x[,1] + pca.model$x[,2] + pca.model$x[,3],
data=wdbc.means, method="glm", family="binomial",
trControl = ctrl)
length( pca.model$x[,1])
length(wdbc.means$V2)
library(caret)
library(pROC)
#Load data
wdbc = read.csv("data/wdbc.data", header= FALSE)
#only the means
wdbc.means = wdbc[2:12]
#PCA
pca.model = prcomp(wdbc.means[,2:11])
summary(pca.model)
biplot(pca.model, scale = 0)
#Logistic regression on means.
#Train and test on same dataset.
cancer.fit = glm(V2 ~ pca.model$x[,1] + pca.model$x[,2] + pca.model$x[,3], data=wdbc.means, family= binomial)
summary(cancer.fit)
#Gives probabilities that the observation is a malignant tumor. Probability close to 1 is malignant, 0 is benign.
cancer.probs = predict(cancer.fit, type = "response")
#Create a vector of 569 Benign elements
cancer.pred=rep("B",569)
#Transform all the ones greate than 0.5 to Malignant.
cancer.pred[cancer.probs>0.5]="M"
table(cancer.pred, wdbc$V2)
#10-fold cross validation
ctrl <- trainControl(method = "repeatedcv", number = 10, savePredictions = TRUE)
mod_fit <- train(V2~ pca.model$x[,1] + pca.model$x[,2] + pca.model$x[,3],
data=wdbc.means, method="glm", family="binomial",
trControl = ctrl)
class( pca.model$x[,1])
class(wdbc.means$V5)
summary( pca.model$x[,1])
summary(wdbc.means$V5)
#10-fold cross validation
ctrl <- trainControl(method = "repeatedcv", number = 10, savePredictions = TRUE)
mod_fit <- train(V2~ pca.model$x[,1] + pca.model$x[,2] + pca.model$x[,3],
data=wdbc.means, preProc="pca", method="glm", family="binomial",
trControl = ctrl)
#10-fold cross validation
ctrl <- trainControl(method = "repeatedcv", number = 10, savePredictions = TRUE)
mod_fit <- train(V2~ pca.model$x[,1] + pca.model$x[,2] + pca.model$x[,3],
data=pca.model, preProc="pca", method="glm", family="binomial",
trControl = ctrl)
#10-fold cross validation
ctrl <- trainControl(method = "repeatedcv", number = 10, savePredictions = TRUE)
mod_fit <- train(V2~ pca.model$x[,1] + pca.model$x[,2] + pca.model$x[,3],
data=pca.model$x, preProc="pca", method="glm", family="binomial",
trControl = ctrl)
#10-fold cross validation
ctrl <- trainControl(method = "repeatedcv", number = 10, savePredictions = TRUE)
mod_fit <- train(V2~ pca.model$x[,1] + pca.model$x[,2] + pca.model$x[,3],
data=wdbc.means, preProc="pca", method="glm", family="binomial",
trControl = ctrl)
install.packages("AppliedPredictiveModeling")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
version
version
install.packages("installr")
version
install.packages("AppliedPredictiveModeling")
source('~/Documents/pca example.R')
install.packages("caret")
source('~/Documents/pca example.R')
install.packages("e1071")
source('~/Documents/pca example.R')
PCFit
library(caret)
library(pROC)
install.packages("pROC")
library(caret)
library(pROC)
#Load data
wdbc = read.csv("data/wdbc.data", header= FALSE)
#only the means
wdbc.means = wdbc[2:12]
#PCA
pca.model = prcomp(wdbc.means[,2:11])
summary(pca.model)
biplot(pca.model, scale = 0)
#Logistic regression on means.
#Train and test on same dataset.
cancer.fit = glm(V2 ~ pca.model$x[,1] + pca.model$x[,2] + pca.model$x[,3], data=wdbc.means, family= binomial)
summary(cancer.fit)
#Gives probabilities that the observation is a malignant tumor. Probability close to 1 is malignant, 0 is benign.
cancer.probs = predict(cancer.fit, type = "response")
#Create a vector of 569 Benign elements
cancer.pred=rep("B",569)
#Transform all the ones greate than 0.5 to Malignant.
cancer.pred[cancer.probs>0.5]="M"
table(cancer.pred, wdbc$V2)
#10-fold cross validation
ctrl <- trainControl(method = "repeatedcv", number = 10, savePredictions = TRUE)
#Perform logistic regression on cross-validated data
mod_fit <- train(V2~ pca.model$x[,1] + pca.model$x[,2] + pca.model$x[,3],
data=wdbc.means, preProc="pca", method="glm", family="binomial",
trControl = ctrl)
summary(pca.model)
source('~/Documents/pca example.R')
summary(trainPC)
summary(trainPC$training.diagnosis)
summary(trainPC)
PCFit <- train(training.diagnosis ~trainPC$PC1+trainPC$PC2,data= trainPC, method="glm")
PCFit <- train(training.diagnosis ~.,data= trainPC, method="glm")
#10-fold cross validation
ctrl <- trainControl(method = "repeatedcv", number = 10, savePredictions = TRUE)
#Perform logistic regression on cross-validated data
mod_fit <- train(V2~ .,
data=wdbc.means, preProc="pca", method="glm", family="binomial",
trControl = ctrl)
library(caret)
library(pROC)
#Load data
wdbc = read.csv("data/wdbc.data", header= FALSE)
#only the means
wdbc.means = wdbc[2:12]
#PCA
pca.model = prcomp(wdbc.means[,2:11])
summary(pca.model)
biplot(pca.model, scale = 0)
#Logistic regression on means.
#Train and test on same dataset.
cancer.fit = glm(V2 ~ pca.model$x[,1] + pca.model$x[,2] + pca.model$x[,3], data=wdbc.means, family= binomial)
summary(cancer.fit)
#Gives probabilities that the observation is a malignant tumor. Probability close to 1 is malignant, 0 is benign.
cancer.probs = predict(cancer.fit, type = "response")
#Create a vector of 569 Benign elements
cancer.pred=rep("B",569)
#Transform all the ones greate than 0.5 to Malignant.
cancer.pred[cancer.probs>0.5]="M"
table(cancer.pred, wdbc$V2)
#10-fold cross validation
ctrl <- trainControl(method = "repeatedcv", number = 10, savePredictions = TRUE)
#Perform logistic regression on cross-validated data
mod_fit <- train(V2~ .,
data=wdbc.means, preProc="pca", method="glm", family="binomial",
trControl = ctrl)
pred = predict(mod_fit, type = "prob")
actual = as.numeric(wdbc.means$V2)-1
roc.log <- roc(actual, pred$B)
# Plot ROC
plot.roc(roc.log, xlab = "False Positive Rate", ylab="True Positive Rate", main="ROC Curve", print.auc=TRUE)
#Get AUC
auc(roc.log)
#10-fold cross validation
ctrl <- trainControl(method = "repeatedcv", number = 10, savePredictions = TRUE)
#Perform logistic regression on cross-validated data
mod_fit <- train(V2~ .,
data=pca.model, preProc="pca", method="glm", family="binomial",
trControl = ctrl)
pca.model
class(pca.model)
source('~/Documents/pca example.R')
class(trainPC)
trainPC
summary(trainPC)
class(preProc)
class(trainPC)
class(testPC)
summary(wdbc.means{2:,})
summary(wdbc.means[2:,])
summary(wdbc.means[2,])
head(wdbc.means[2,])
class(New_training)
class(wdbc.means)
head(wdbc.means[,2])
head(wdbc.means[,:2])
head(wdbc.means[,2:])
head(wdbc.means[,1])
head(wdbc.means[,2])
head(wdbc.means[,12])
head(wdbc.means[,11])
summary(wdbc.means)
summary(wdbc.means[2:11])
# Different PCA method
preProc <- preProcess(wdbc.means[2:11],method="pca")
trainPC <- predict(preProc, wdbc.means[2:11])
testPC <- predict(preProc, wdbc.means[2:11])
# add the diagnosis into the trainPC data
trainPC <- data.frame(trainPC, wdbc.means$V2)
summary(trainPC)
class(trainPC)
#10-fold cross validation
ctrl <- trainControl(method = "repeatedcv", number = 10, savePredictions = TRUE)
#Perform logistic regression on cross-validated data
mod_fit <- train(wdbc.means.V2~ .,
data=trainPC, preProc="pca", method="glm", family="binomial",
trControl = ctrl)
pred = predict(mod_fit, type = "prob")
actual = as.numeric(wdbc.means$V2)-1
roc.log <- roc(actual, pred$B)
# Plot ROC
plot.roc(roc.log, xlab = "False Positive Rate", ylab="True Positive Rate", main="ROC Curve", print.auc=TRUE)
#Get AUC
auc(roc.log)
trainPC
source('~/Documents/pca example.R')
summary(trainPC)
summary(testPC)
head(trainPC)
head(testPC)
biplot(preProc)
biplot(preProc, scale= 0)
head(trainPC)
# Different PCA method
preProc <- preProcess(wdbc.means[2:11],method="pca")
trainPC <- predict(preProc, wdbc.means[2:11])
testPC <- predict(preProc, wdbc.means[2:11])
# add the diagnosis into the trainPC data
trainPC <- data.frame(trainPC, wdbc.means$V2)
head(trainPC)
summary(preProc)
class(preProc)
preProc$pcaComp
preProc$method
biplot(preProc)
# Different PCA method
preProc <- preProcess(wdbc.means[2:11],method="pca", pcaComp = 3)
trainPC <- predict(preProc, wdbc.means[2:11])
testPC <- predict(preProc, wdbc.means[2:11])
# add the diagnosis into the trainPC data
trainPC <- data.frame(trainPC, wdbc.means$V2)
preProc
#10-fold cross validation
ctrl <- trainControl(method = "repeatedcv", number = 10, savePredictions = TRUE)
#Perform logistic regression on cross-validated data
mod_fit <- train(wdbc.means.V2~ .,
data=trainPC, preProc="pca", method="glm", family="binomial",
trControl = ctrl)
pred = predict(mod_fit, type = "prob")
actual = as.numeric(wdbc.means$V2)-1
roc.log <- roc(actual, pred$B)
# Plot ROC
plot.roc(roc.log, xlab = "False Positive Rate", ylab="True Positive Rate", main="ROC Curve", print.auc=TRUE)
#Get AUC
auc(roc.log)
mod_fit
trainPC
head(trainPC)
length(trainPC)
summary(mod_fit)
mod_fit
plot.roc(mod_fit)
class(mod_fit)
pred
head(pred)
trainPC
head(trainPC)
mod_fit
summary(mod_fit)
#10-fold cross validation
ctrl <- trainControl(method = "repeatedcv", number = 10, savePredictions = TRUE)
#Perform logistic regression on cross-validated data
mod_fit <- train(wdbc.means.V2~ .,
data=trainPC, preProc="pca", method="glm", family="binomial",
trControl = ctrl)
summary(mod_fit)
mod_fit$pred
mod_fit
trainPC
=
trainPC
head(trainPC)
# Different PCA method
preProc <- preProcess(wdbc.means[2:11],method="pca", pcaComp = 3)
trainPC <- predict(preProc, wdbc.means[1])
# Different PCA method
preProc <- preProcess(wdbc.means[2:11],method="pca", pcaComp = 3)
trainPC <- predict(preProc, wdbc.means[,1])
# Different PCA method
preProc <- preProcess(wdbc.means[2:11],method="pca", pcaComp = 3)
trainPC <- predict(preProc, wdbc.means[-2:11])
# Different PCA method
preProc <- preProcess(wdbc.means[2:11],method="pca", pcaComp = 3)
trainPC <- predict(preProc, wdbc.means[2:11])
testPC <- predict(preProc, wdbc.means[2:11])
# add the diagnosis into the trainPC data
trainPC <- data.frame(trainPC, wdbc.means$V2)
#10-fold cross validation
ctrl <- trainControl(method = "repeatedcv", number = 10, savePredictions = TRUE)
#Perform logistic regression on cross-validated data
mod_fit <- train(wdbc.means.V2~ .,
data=trainPC, preProc="pca", method="glm", family="binomial",
trControl = ctrl)
summary(mod_fit)
# Different PCA method
preProc <- preProcess(wdbc.means[2:11], method="pca", pcaComp = 9)
trainPC <- predict(preProc, wdbc.means[2:11])
testPC <- predict(preProc, wdbc.means[2:11])
# add the diagnosis into the trainPC data
trainPC <- data.frame(trainPC, wdbc.means$V2)
#10-fold cross validation
ctrl <- trainControl(method = "repeatedcv", number = 10, savePredictions = TRUE)
#Perform logistic regression on cross-validated data
mod_fit <- train(wdbc.means.V2~ .,
data=trainPC, preProc="pca", method="glm", family="binomial",
trControl = ctrl)
summary(mod_fit)
mod_fit
predict?
?predict
mod_fit$pred
#Logistic regression on means.
#Train and test on same dataset.
cancer.fit = glm(V2 ~ pca.model$x[,1] + pca.model$x[,2] + pca.model$x[,3], data=wdbc.means, family= binomial)
summary(cancer.fit)
cancer.fit
plot.roc(cancer.fit)
class(cancer.fit)
class(mod_fit)
cancer.pred
cancer.probs
plot.roc(cancer.probs)
plot.roc(cancer.pred, cancer.probs)
library(caret)
library(pROC)
#Load data
wdbc = read.csv("data/wdbc.data", header= FALSE)
#only the means
#wdbc.means = wdbc[2:12]
#PCA
pca.model = prcomp(wdbc[,3:32])
summary(pca.model)
biplot(pca.model, scale = TRUE)
#Logistic regression on means.
#Train and test on same dataset.
cancer.fit = glm(V2 ~ pca.model$x[,1] + pca.model$x[,2], data=wdbc.means, family= binomial)
library(caret)
library(pROC)
#Load data
wdbc = read.csv("~/matt/home/Documents/Project/data/wdbc.data", header= FALSE)
library(caret)
library(pROC)
#Load data
#linux
wdbc = read.csv("/matt/home/Documents/Project/data/wdbc.data", header= FALSE)
library(caret)
library(pROC)
#Load data
#linux
wdbc = read.csv("/home/mathew/Documents/Project/data/wdbc.data", header= FALSE)
library(caret)
library(pROC)
#Load data
#linux
wdbc = read.csv("//home//mathew//Documents//Project//data//wdbc.data", header= FALSE)
library(caret)
library(pROC)
#Load data
#linux
wdbc = read.csv("~//home//mathew//Documents//Project//data//wdbc.data", header= FALSE)
library(caret)
library(pROC)
#Load data
#linux
wdbc = read.csv("~//home//mathew//Documents//Project//data//wdbc.data", header= FALSE)
wdbc = read.csv("~//home//mathew//Documents//Project//data//wdbc.data", header= FALSE)
setwd("~/Documents/530Project/data")
library(caret)
library(pROC)
#Load data
#linux
wdbc = read.csv("wdbc.data", header= FALSE)
setwd("~/Documents/530Project/data")
wdbc = read.csv("wdbc.data", header= FALSE)
library(caret)
library(pROC)
#Load data
#linux
wdbc = read.csv("wdbc.data", header= FALSE)
wdbc = read.csv("wdbc.data", header= FALSE)
library(caret)
library(pROC)
#Load data
#linux
wdbc = read.csv("wdbc.data", header= FALSE)
library(caret)
library(pROC)
#Load data
#linux
wdbc = read.csv("wdbc.data", header= FALSE)
#PCA
pca.model = prcomp(wdbc[,3:32])
summary(pca.model)
biplot(pca.model, scale = TRUE)
#Logistic regression on means.
#Train and test on same dataset.
cancer.fit = glm(V2 ~ pca.model$x[,1] + pca.model$x[,2], data=wdbc.means, family= binomial)
#Logistic regression on means.
#Train and test on same dataset.
cancer.fit = glm(V2 ~ pca.model$x[,1] + pca.model$x[,2], data=wdbc, family= binomial)
summary(cancer.fit)
#Gives probabilities that the observation is a malignant tumor. Probability close to 1 is malignant, 0 is benign.
cancer.probs = predict(cancer.fit, type = "response")
#Create a vector of 569 Benign elements
cancer.pred=rep("B",569)
#Transform all the ones greate than 0.5 to Malignant.
cancer.pred[cancer.probs>0.5]="M"
table(cancer.pred, wdbc$V2)
# Different PCA method
preProc <- preProcess(wdbc[2:32], method="pca", pcaComp = 2)
trainPC <- predict(preProc, wdbc[2:32])
testPC <- predict(preProc, wdbc[2:32])
# add the diagnosis into the trainPC data
trainPC <- data.frame(trainPC, wdbc$V2)
#10-fold cross validation
ctrl <- trainControl(method = "repeatedcv", number = 10, savePredictions = TRUE)
#Perform logistic regression on cross-validated data
mod_fit <- train(wdbc.V2~ .,
data=trainPC, preProc="pca", method="glm", family="binomial",
trControl = ctrl)
summary(mod_fit)
pred = predict(mod_fit, type = "prob")
actual = as.numeric(wdbc$V2)-1
roc.log <- roc(actual, pred$B)
# Plot ROC
plot.roc(roc.log, xlab = "False Positive Rate", ylab="True Positive Rate", main="ROC Curve", print.auc=TRUE)
#Get AUC
auc(roc.log)
